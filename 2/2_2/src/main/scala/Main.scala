import scala.util.Random
import util.control.Breaks._
object Main extends App {
  val hello = "Hello, Scala!"
  println(hello)

  println("//--------------------------A----------------------------------//")
  // a. Напишите программу, которая:
  //   i.    выводит фразу «Hello, Scala!» справа налево
  //   ii.   переводит всю фразу в нижний регистр
  //   iii.  удаляет символ!
  //   iv.   добавляет в конец фразы «and goodbye python!»
  println(hello.reverse)
  println(hello.toLowerCase())
  println(hello.dropRight(1))
  println(hello.dropRight(1) + " and goodbye python!")

  // b. Напишите программу, которая вычисляет ежемесячный оклад сотрудника после вычета налогов.
  // На вход вашей программе подается значение годового дохода до вычета налогов,
  // размер премии – в процентах от годового дохода и компенсация питания.
  val god_doh = 100000 // годовой доход
  val prem = 10 // размер премии – в процентах от годового дохода
  val pit = 10000 // компенсация питания.
  // val a = god_doh - pit
  // val b = a / 100
  // val c = b * prem
  // val d = a - c
  // val e = d / 12
  // println(e)
  println("//--------------------------B----------------------------------//")
  val res = ((god_doh - pit) - (((god_doh - pit) / 100) * prem)) / 12
  println(res)

  // с. Напишите программу, которая рассчитывает для каждого сотрудника отклонение(в процентах)
  // от среднего значения оклада на уровень всего отдела. В итоговом значении должно учитываться
  // в большую или меньшую сторону отклоняется размер оклада. На вход вышей программе подаются
  // все значения, аналогичные предыдущей программе, а также список со значениями окладов
  // сотрудников отдела 100, 150, 200, 80, 120, 75.
  val map = Map(
    100 -> Map(
      "Сотрудник1" -> Random.between(100, 150),
      "Сотрудник2" -> Random.between(100, 150),
      "Сотрудник3" -> Random.between(100, 150),
      "Сотрудник4" -> Random.between(100, 150),
      "Сотрудник5" -> Random.between(100, 150)
    ),
    150 -> Map(
      "Сотрудник6" -> Random.between(200, 300),
      "Сотрудник7" -> Random.between(200, 300),
      "Сотрудник8" -> Random.between(200, 300),
      "Сотрудник9" -> Random.between(200, 300),
      "Сотрудник10" -> Random.between(200, 300)
    ),
    200 -> Map(
      "Сотрудник11" -> Random.between(20, 300),
      "Сотрудник12" -> Random.between(20, 300),
      "Сотрудник13" -> Random.between(20, 300),
      "Сотрудник14" -> Random.between(20, 300),
      "Сотрудник15" -> Random.between(20, 300)
    ),
    80 -> Map(
      "Сотрудник16" -> Random.between(100, 450),
      "Сотрудник17" -> Random.between(100, 450),
      "Сотрудник18" -> Random.between(100, 450),
      "Сотрудник19" -> Random.between(100, 450),
      "Сотрудник20" -> Random.between(100, 450)
    ),
    120 -> Map(
      "Сотрудник21" -> Random.between(400, 500),
      "Сотрудник22" -> Random.between(400, 500),
      "Сотрудник23" -> Random.between(400, 500)
    ),
    75 -> Map(
      "Сотрудник24" -> Random.between(1000, 1500)
    )
  )
  println("//--------------------------C----------------------------------//")
  def printOklad() = {
    for ((otdel, staffs) <- map) {
      print("Отдел: " + otdel)
      val average = staffs.foldLeft(0)(_ + _._2) / (staffs.size * 1.0)
      println(" Среднее: " + average)
      for ((staff, oklad) <- staffs) {
        print("  " + staff + " " + oklad)
        val otklonenie = 100.0 - (oklad / (average / 100.0))
        println(" " + otklonenie.round + "%")
      }
    }
  }
  printOklad();

  // d. Попробуйте рассчитать новую зарплату сотрудника, добавив(или отняв, если сотрудник плохо себя вел)
  // необходимую сумму с учетом результатов прошлого задания. Добавьте его зарплату в список и
  // вычислите значение самой высокой зарплаты и самой низкой.
  println("//----------------------------D--------------------------------//")
  var list = List.apply[Int]()
  for ((otdel, staffs) <- map) {
    for ((staff, oklad) <- staffs) {
      val ok = oklad + Random.between(-50, 50)
      list = list :+ ok
    }
  }

  for (n <- list) print(n + " ")
  println()
  println("Максимальная: " + list.max)
  println("Минимальная: " + list.min)

  // e. Также в вашу команду пришли два специалиста с окладами 350 и 90 тысяч рублей.
  // Попробуйте отсортировать список сотрудников по уровню оклада от меньшего к большему.
  println("//----------------------------E--------------------------------//")
  list = list :++ List(350, 90)
  list = list.sorted
  for (n <- list) print(n + " ")
  println()

  // f. Кажется, вы взяли в вашу команду еще одного сотрудника и предложили ему оклад 130 тысяч.
  // Вычислите самостоятельно номер сотрудника в списке так, чтобы сортировка не нарушилась и добавьте
  // его на это место.
  println("//----------------------------F--------------------------------//")
  var i = 0
  breakable {
    for (n <- list) {
      if (n > 130) {
        list = list.take(i) ++ List(130) ++ list.drop(i)
        break
      }
      i = i + 1
    }
  }

  for (n <- list) print(n + " ")
  println()

  // g. Попробуйте вывести номера сотрудников из полученного списка, которые попадают под
  // категорию middle. На входе программе подается «вилка» зарплаты специалистов уровня middle.
  println("//----------------------------G--------------------------------//")
  val minzp = 100
  val maxzp = 150
  i = 0
  for (n <- list) {
    if (n > minzp && n < maxzp) print(i + " ")
    i = i + 1
  }
  println()

  // h. Однако наступил кризис и ваши сотрудники требуют повысить зарплату. Вам необходимо
  // проиндексировать зарплату каждого сотрудника на уровень инфляции – 7%
  println("//----------------------------H--------------------------------//")
  var templist = List.apply[Long]()
  for (n <- list) {
    val a = (n / 100.0) * 107.0
    templist = templist :+ a.round
  }

  for (n <- templist) print(n + " ")
  println()
}
